name: Update Draft HIPs Data

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
  push:
    branches: ['**']
  workflow_dispatch: # Allows manual triggering

jobs:
  update-draft-hips:
    # Run on any branch to allow testing
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Import GPG Key
        id: gpg_importer
        uses: step-security/ghaction-import-gpg@6c8fe4d0126a59d57c21f87c9ae5dd3451fa3cca # v6.1.0
        with:
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          git_user_signingkey: true
          gpg_private_key: ${{ secrets.GPG_KEY_CONTENTS }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version: "20"

      - name: Create Script
        run: |
          mkdir -p _data
          cat << 'EOF' > fetch-draft-hips.js
          const https = require('https');
          const fs = require('fs');

          async function makeGraphQLRequest(query, token) {
            return new Promise((resolve, reject) => {
              const options = {
                hostname: 'api.github.com',
                path: '/graphql',
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json',
                  'User-Agent': 'Node.js'
                }
              };

              const req = https.request(options, (res) => {
                let data = '';
                res.on('data', chunk => { data += chunk; });
                res.on('end', () => {
                  try {
                    resolve(JSON.parse(data));
                  } catch (e) {
                    reject(new Error(`Failed to parse response: ${e.message}. Data: ${data}`));
                  }
                });
              });

              req.on('error', reject);
              req.write(JSON.stringify({ query }));
              req.end();
            });
          }

          async function getAllPRs() {
            const query = `
              query { 
                repository(name: "hiero-improvement-proposals", owner: "hiero-ledger") {
                  pullRequests(first: 100, states: [OPEN], orderBy: {field: CREATED_AT, direction: DESC}) {
                    nodes {
                      title
                      number
                      url
                      headRefOid
                      files(first: 100) {
                        edges {
                          node {
                            path
                            additions
                            deletions
                          }
                        }
                      }
                      author {
                        login
                      }
                      createdAt
                      updatedAt
                    }
                  }
                }
              }
            `;

            try {
              const result = await makeGraphQLRequest(query, process.env.GITHUB_TOKEN);
              
              if (result.errors) {
                console.error('GraphQL errors:', result.errors);
                process.exit(1);
              }

              return result.data.repository.pullRequests.nodes;
            } catch (error) {
              console.error('Error fetching PRs:', error);
              throw error;
            }
          }

          function isHipPR(pr) {
            // Check if PR contains HIP file changes
            // Assumes HIPs are stored in a directory like 'hip' or have a filename pattern
            const fileEdges = pr.files.edges || [];
            
            // Check if any file path matches HIP pattern
            return fileEdges.some(edge => {
              const path = edge.node.path;
              // Adjust this pattern to match your HIP file structure
              return path.match(/^hip\/hip-\d+\.md$/) || 
                     path.match(/^hips\/hip-\d+\.md$/) ||
                     path.match(/^content\/hips\/hip-\d+\.md$/);
            });
          }

          // Run the main function
          getAllPRs().then(prs => {
            // Filter to only include PRs that contain HIP changes
            const hipPRs = prs.filter(isHipPR);
            
            console.log(`Found ${prs.length} open PRs in total`);
            console.log(`Found ${hipPRs.length} open PRs containing HIP changes`);
            
            // Always create a completely new file - never append
            // This ensures there are no duplicates from previous runs
            if (fs.existsSync('_data/draft_hips.json')) {
              console.log('Removing old draft_hips.json file');
              fs.unlinkSync('_data/draft_hips.json');
            }
            
            // Write a brand new file with only the current PR data
            console.log('Creating fresh draft_hips.json file');
            fs.writeFileSync('_data/draft_hips.json', JSON.stringify(hipPRs, null, 2));
          }).catch(error => {
            console.error('Failed to fetch PRs:', error);
            process.exit(1);
          });
          EOF

      - name: Run Script
        run: node fetch-draft-hips.js
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Print Results for Testing
        run: |
          echo "--- Generated draft_hips.json content ---"
          cat _data/draft_hips.json
          echo "--- End of file ---"